/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Oleg Shuldyakov (https://sketchfab.com/shuographics)
license: SKETCHFAB Editorial (https://sketchfab.com/licenses)
source: https://sketchfab.com/3d-models/low-polygon-art-medical-brain-roentgen-9dc01029d5df4520b6de505dbb83b070
title: Low Polygon Art Medical Brain Roentgen
*/

import React, {
  useRef,
  useMemo,
  useContext,
  createContext,
  useEffect,
} from "react";
import { useGLTF, Merged, useAnimations } from "@react-three/drei";
import { useCreatorStore } from "../../hooks/use-creator-store.hook";

const context = createContext();
export function Instances({ children, ...props }) {
  const glb = useGLTF(
    import.meta.env.VITE_ASSETS_PATH + "/models/medical_brain.glb"
  );
  const instances = useMemo(
    () => ({
      RightDefault: glb.nodes["right_08_-_Default_0"],
      LeftDefault: glb.nodes["left_08_-_Default_0"],
      CentrDefault: glb.nodes["centr_08_-_Default_0"],
    }),
    [glb.nodes]
  );

  const { setModel, model, currentProject } = useCreatorStore();

  useEffect(() => {
    for (const material in model.materialColors) {
      const { color } = model.materialColors[material];

      glb.materials[material].color.set(color);
    }

    setModel({ glb });
  }, [currentProject]);

  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function MedicalBrain(props) {
  const instances = useContext(context);
  const group = useRef();
  // const { actions } = useAnimations(animations, group);

  return (
    <group ref={group} position={[0, -700, 0]} {...props} dispose={null}>
      <group name='Sketchfab_Scene'>
        <group
          name='Sketchfab_model'
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Sketchfab_model" }}
        >
          <group
            name='brain_color_3FBX'
            rotation={[Math.PI / 2, 0, 0]}
            userData={{ name: "brain_color_3.FBX" }}
          >
            <group name='Object_2' userData={{ name: "Object_2" }}>
              <group name='RootNode' userData={{ name: "RootNode" }}>
                <group
                  name='centr'
                  rotation={[-Math.PI / 2, 0, 0]}
                  userData={{ name: "centr" }}
                >
                  <group name='right' userData={{ name: "right" }}>
                    <instances.RightDefault
                      name='right_08_-_Default_0'
                      userData={{ name: "right_08 - Default_0" }}
                    />
                  </group>
                  <group name='left' userData={{ name: "left" }}>
                    <instances.LeftDefault
                      name='left_08_-_Default_0'
                      userData={{ name: "left_08 - Default_0" }}
                    />
                  </group>
                  <instances.CentrDefault
                    name='centr_08_-_Default_0'
                    userData={{ name: "centr_08 - Default_0" }}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(import.meta.env.VITE_ASSETS_PATH + "/models/medical_brain.glb");
