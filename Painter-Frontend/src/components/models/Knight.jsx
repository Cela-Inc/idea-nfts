/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {
  useRef,
  useMemo,
  useContext,
  createContext,
  useEffect,
} from "react";
import { useGLTF, Merged, useAnimations } from "@react-three/drei";
import { useCreatorStore } from "../../hooks/use-creator-store.hook";

const context = createContext();
export function Instances({ children, ...props }) {
  const glb = useGLTF(import.meta.env.VITE_ASSETS_PATH + "/models/knight.glb");
  const instances = useMemo(
    () => ({
      Body: glb.nodes.Body,
      HeadHands: glb.nodes.Head_Hands,
      LowerArmor: glb.nodes.Lower_Armor,
    }),
    [glb.nodes]
  );

  const { setModel, model } = useCreatorStore();

  useEffect(() => {
    // for (const material in model.materialColors) {
    //   const { color } = model.materialColors[material];

    //   glb.materials[material].color.set(color);
    // }

    setModel({ glb });
  }, []);

  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Knight(props) {
  const instances = useContext(context);
  const group = useRef();

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <group name='__root__' userData={{ name: "__root__" }}>
          <group
            name='Armature'
            // rotation={[Math.PI / 2, 0, 0]}
            // scale={0.01}
            userData={{ name: "Armature" }}
          >
            {/* <primitive object={glb.nodes.Hips} /> */}
            <instances.Body name='Body' userData={{ name: "Body" }} />
            <instances.HeadHands
              name='Head_Hands'
              userData={{ name: "Head_Hands" }}
            />
            <instances.LowerArmor
              name='Lower_Armor'
              userData={{ name: "Lower_Armor" }}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(import.meta.env.VITE_ASSETS_PATH + "/models/knight.glb");
