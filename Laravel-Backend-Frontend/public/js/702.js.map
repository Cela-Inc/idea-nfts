{"version":3,"file":"js/702.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/pack-ff027b89.esm.js"],"sourcesContent":["import { A as AmountSchema, N as NFTInputOrUriSchema, _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cK as AddressSchema, cL as BigNumberishSchema, cM as RawDateSchema, cx as ContractWrapper, cN as FEATURE_PACK_VRF, aM as ContractEvents, aZ as fetchCurrencyMetadata, c4 as LINK_TOKEN_ADDRESS, aj as Erc20, aH as StandardErc1155, bN as assertEnabled, aA as Erc1155, ab as ContractMetadata, cO as PackContractSchema, ac as ContractRoles, ad as ContractRoyalty, aa as ContractEncoder, aL as GasCostEstimator, aN as ContractInterceptor, aQ as ContractOwner, bq as getRoleHash, cE as uploadOrExtractURI, a_ as normalizePriceValue, cF as hasERC20Allowance, cG as isTokenApprovedForTransfer, bO as detectContractFeature } from './thirdweb-checkout-ff2f368f.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { BigNumber, ethers } from 'ethers';\nimport { z } from 'zod';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nz.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n});\n\n/**\n * @public\n */\n\nclass PackVRF {\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options);\n    _defineProperty(this, \"featureName\", FEATURE_PACK_VRF.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Claim the rewards from a pack that has been opened\n   * This will return the contents of the pack\n   * Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   */\n  async claimRewards() {\n    const receipt = await this.contractWrapper.sendTransaction(\"claimRewards\", [], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    return this.parseRewards(rewards);\n  }\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener that will be called everytime a pack is opened in this contract\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if the connected address can claim rewards after opening a pack\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = claimerAddress || (await this.contractWrapper.getSignerAddress());\n    return await this.contractWrapper.readContract.canClaimRewards(address);\n  }\n\n  /**\n   * Open a pack and claim the rewards in one transaction.\n   * This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the balance of LINK in the contract\n   * @returns the balance of LINK in the contract\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   * @param amount the amount of LINK to transfer to the contract\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.readContract.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"_vrf\", void 0);\n    this.abi = abi;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), ethers.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.readContract.getPackContents(packId);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const rewardAmount = ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(rewardAmount).div(amount).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  async create(metadataWithRewards) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo(signerAddress, metadataWithRewards);\n  }\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack.\n   * @remarks See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  async addPackContents(packId, packContents) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    const parsedContents = PackRewardsOutputSchema.parse(packContents);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    const receipt = await this.contractWrapper.sendTransaction(\"addPackContents\", [packId, contents, numOfRewardUnits, signerAddress]);\n    const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackUpdated event not found\");\n    }\n    const id = event[0].args.packId;\n    return {\n      id: id,\n      receipt,\n      data: () => this.erc1155.get(id)\n    };\n  }\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  async createTo(to, metadataWithRewards) {\n    const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n    const parsedMetadata = PackMetadataInputSchema.parse(metadataWithRewards);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    const receipt = await this.contractWrapper.sendTransaction(\"createPack\", [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, to]);\n    const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = event[0].args.packId;\n    return {\n      id: packId,\n      receipt,\n      data: () => this.erc1155.get(packId)\n    };\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (this._vrf) {\n      throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.readContract.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n_defineProperty(Pack, \"contractRoles\", [\"admin\", \"minter\", \"asset\", \"transfer\"]);\n\nexport { Pack };\n"],"names":["CommonWrappableSchema","z","contractAddress","ERC20WrappableSchema","extend","quantity","A","ERC721WrappableSchema","tokenId","ERC1155WrappableSchema","ERC20RewardSchema","omit","quantityPerReward","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","totalRewards","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","erc20Rewards","default","erc721Rewards","erc1155Rewards","PackRewardsOutputSchema","PackMetadataInputSchema","packMetadata","N","rewardsPerPack","openStartTime","Date","PackVRF","constructor","network","address","storage","options","chainId","contractWrapper","arguments","length","undefined","_","this","events","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","async","amount","receipt","sendTransaction","gasLimit","id","parseLogs","logs","args","requestId","e","event","Error","rewards","rewardUnitsDistributed","parseRewards","reward","tokenType","tokenMetadata","getProvider","assetContract","push","totalAmount","decimals","toString","callback","addEventListener","data","packId","opener","claimerAddress","getSignerAddress","canClaimRewards","getLinkContract","balanceOf","transfer","linkAddress","contract","getSignerOrProvider","Pack","vrf","_vrf","abi","super","gasless","openzeppelin","useEOAForwarder","erc1155","metadata","roles","contractRoles","royalties","encoder","estimator","interceptor","owner","detectVrf","get","queryParams","getAll","walletAddress","getOwned","totalCount","hasRole","contents","perUnitAmounts","getPackContents","i","rewardAmount","div","metadataWithRewards","signerAddress","createTo","packContents","parsedContents","parse","numOfRewardUnits","toPackContentArgs","to","uri","parsedMetadata","rewardsData","provider","erc20","totalQuantity","mul","erc721","functionName","_len","Array","_key","call"],"sourceRoot":""}