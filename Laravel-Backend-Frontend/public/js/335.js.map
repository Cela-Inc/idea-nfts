{"version":3,"file":"js/335.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/split-345aa481.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cx as ContractWrapper, ab as ContractMetadata, cP as SplitsContractSchema, ac as ContractRoles, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, aN as ContractInterceptor, aY as fetchCurrencyValue } from './thirdweb-checkout-ff2f368f.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(index);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, tokenAddress);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const walletBalance = await this.contractWrapper.readContract.provider.getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(address, totalReceived, await this.contractWrapper.readContract[\"released(address)\"](address));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased(address)\"](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(walletAddress, totalReceived, await this.contractWrapper.readContract[\"released(address,address)\"](tokenAddress, walletAddress));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(address)]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  async withdraw(walletAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [walletAddress])\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async withdrawToken(walletAddress, tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address,address)\", [tokenAddress, walletAddress])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  async distribute() {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", [])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async distributeToken(tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute(address)\", [tokenAddress])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.readContract.shares(address));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.readContract.totalShares());\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Split, \"contractRoles\", [\"admin\"]);\n\nexport { Split };\n"],"names":["Split","chainId","this","_chainId","constructor","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","_","metadata","roles","contractRoles","encoder","estimator","events","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","async","recipients","index","totalRecipients","payeeCount","lt","recipientAddress","payee","push","getRecipientSplitPercentage","add","err","toLowerCase","includes","getAllRecipients","balances","recipient","balanceOf","tokenAddress","balanceOfToken","walletBalance","provider","getBalance","totalReleased","totalReceived","_pendingPayment","walletAddress","erc20","getProvider","value","totalShares","walletsShares","Promise","all","shares","splitPercentage","mul","div","toNumber","receipt","sendTransaction","alreadyReleased","sub","functionName","_len","args","Array","_key","call"],"sourceRoot":""}