{"version":3,"file":"js/857.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/vote-9681319d.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cx as ContractWrapper, ab as ContractMetadata, cS as VoteContractSchema, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, aN as ContractInterceptor, aW as VoteType, aY as fetchCurrencyValue, aZ as fetchCurrencyMetadata } from './thirdweb-checkout-ff2f368f.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, ethers, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.readContract.state(data.proposalId),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.readContract.proposalVotes(proposalId);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.readContract.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract[\"quorumNumerator()\"](), this.contractWrapper.readContract.proposalThreshold()]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  async propose(description, executions) {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.readContract.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [tos, values, datas, description]);\n    const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n    return {\n      id: event[0].args.proposalId,\n      receipt\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  async vote(proposalId, voteType) {\n    let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"castVoteWithReason\", [proposalId, voteType, reason])\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  async execute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [tos, values, datas, descriptionHash])\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n\nexport { Vote };\n"],"names":["Vote","chainId","this","_chainId","constructor","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","_","metadata","encoder","estimator","events","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","async","proposalId","proposals","getAll","filter","p","eq","Error","Promise","all","getAllProposals","map","data","proposer","description","startBlock","endBlock","state","votes","getProposalVotes","executions","c","i","toAddress","targets","nativeTokenValue","transactionData","calldatas","proposalVotes","type","label","count","againstVotes","forVotes","abstainVotes","account","getSignerAddress","hasVoted","ensureExists","proposal","get","tos","values","datas","descriptionHash","callStatic","execute","e","balance","provider","getBalance","name","symbol","decimals","value","displayValue","tokenAddress","erc20","getProvider","balanceOf","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","token","proposalThreshold","votingTokenMetadata","toString","receipt","sendTransaction","id","parseLogs","logs","args","voteType","reason","functionName","_len","Array","_key","call"],"sourceRoot":""}