{"version":3,"file":"js/127.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/multiwrap-beb588bb.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { az as StandardErc721, cx as ContractWrapper, ab as ContractMetadata, cD as MultiwrapContractSchema, ac as ContractRoles, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, ad as ContractRoyalty, aQ as ContractOwner, aZ as fetchCurrencyMetadata, cE as uploadOrExtractURI, a_ as normalizePriceValue, cF as hasERC20Allowance, cG as isTokenApprovedForTransfer } from './thirdweb-checkout-ff2f368f.esm.js';\nimport { ethers } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.readContract.getWrappedContents(wrappedTokenId);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: ethers.utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  async wrap(contents, wrappedTokenMetadata, recipientAddress) {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    const tokens = await this.toTokenStructList(contents);\n    const receipt = await this.contractWrapper.sendTransaction(\"wrap\", [tokens, uri, recipient]);\n    const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"TokensWrapped event not found\");\n    }\n    const tokenId = event[0].args.tokenIdOfWrappedToken;\n    return {\n      id: tokenId,\n      receipt,\n      data: () => this.get(tokenId)\n    };\n  }\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  async unwrap(wrappedTokenId, recipientAddress) {\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"unwrap\", [wrappedTokenId, recipient])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Multiwrap, \"contractRoles\", [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]);\n\nexport { Multiwrap };\n"],"names":["Multiwrap","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","super","_","this","metadata","contractWrapper","roles","contractRoles","encoder","estimator","events","royalties","owner","async","wrappedTokenId","wrappedTokens","readContract","getWrappedContents","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","tokenMetadata","getProvider","assetContract","push","contractAddress","quantity","totalAmount","decimals","tokenId","toString","contents","wrappedTokenMetadata","recipientAddress","uri","recipient","getSignerAddress","tokens","toTokenStructList","receipt","sendTransaction","event","parseLogs","logs","Error","args","tokenIdOfWrappedToken","id","data","get","provider","erc20","normalizedQuantity","getAddress","erc721","erc1155","functionName","_len","Array","_key","call"],"sourceRoot":""}