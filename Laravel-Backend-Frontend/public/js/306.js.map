{"version":3,"file":"js/306.js","mappings":"goBAmFA,MAAMA,UAAsB,KAsC1BC,YAAYC,EAASC,EAASC,GAC5B,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CE,EAAUJ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAEpDG,MADsBL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAI,KAAgBJ,EAASC,EAASM,EAAKJ,GAC9GD,EAASM,IAChC,IAAAE,GAAgBC,KAAM,WAAO,IAC7B,IAAAD,GAAgBC,KAAM,gBAAY,IAClC,IAAAD,GAAgBC,KAAM,aAAS,IAC/B,IAAAD,GAAgBC,KAAM,eAAW,IACjC,IAAAD,GAAgBC,KAAM,iBAAa,IACnC,IAAAD,GAAgBC,KAAM,cAAU,IAChC,IAAAD,GAAgBC,KAAM,aAAS,IAC/B,IAAAD,GAAgBC,KAAM,oBAAgB,IACtC,IAAAD,GAAgBC,KAAM,iBAAa,IACnC,IAAAD,GAAgBC,KAAM,aAAS,IAC/B,IAAAD,GAAgBC,KAAM,iBAAa,IACnC,IAAAD,GAAgBC,KAAM,mBAAe,IACrC,IAAAD,GAAgBC,KAAM,cAAU,GAChCA,KAAKJ,IAAMA,EACXI,KAAKC,SAAW,IAAI,KAAiBD,KAAKE,gBAAiB,KAA2BF,KAAKT,SAC3FS,KAAKG,MAAQ,IAAI,KAAcH,KAAKE,gBAAiBf,EAAciB,eACnEJ,KAAKK,UAAY,IAAI,KAAgBL,KAAKE,gBAAiBF,KAAKC,UAChED,KAAKM,MAAQ,IAAI,KAAoBN,KAAKE,iBAC1CF,KAAKO,QAAU,IAAI,KAAgBP,KAAKE,iBACxCF,KAAKQ,UAAY,IAAI,KAAiBR,KAAKE,iBAC3CF,KAAKS,OAAS,IAAI,KAAeT,KAAKE,iBACtCF,KAAKU,aAAe,IAAI,KAAoBV,KAAKE,iBACjDF,KAAKW,YAAc,IAAI,KAAoBX,KAAKE,iBAChDF,KAAKY,OAAS,IAAI,KAAOZ,KAAKE,gBAAiBF,KAAKT,QAASM,GAC7DG,KAAKa,UAAY,IAAI,KAAoCb,KAAKE,gBAAiBF,KAAKT,SACpFS,KAAKc,MAAQ,IAAI,KAAcd,KAAKE,gBACtC,CAKAa,iBAAiB1B,GACfW,KAAKE,gBAAgBc,uBAAuB3B,EAC9C,CACA4B,aACE,OAAOjB,KAAKE,gBAAgBgB,aAAa5B,OAC3C,CASA6B,6BAEE,aADgCnB,KAAKE,gBAAgBgB,aAAaE,SAAQ,QAAY,YAAa,IAErG,CA0BAD,WAAWlB,GACT,OAAOD,KAAKY,OAAOS,KAAKpB,EAC1B,CAyBAkB,aAAaG,EAAerB,GAC1B,OAAOD,KAAKY,OAAOW,OAAOD,EAAerB,EAC3C,CAQAkB,yBAAyBK,EAAUvB,GACjC,OAAOD,KAAKY,OAAOa,mBAAmBD,EAAUvB,EAClD,CA0BAkB,gBAAgBlB,GACd,OAAOD,KAAKY,OAAOc,UAAUzB,EAC/B,CA6BAkB,kBAAkBG,EAAerB,GAC/B,OAAOD,KAAKY,OAAOe,YAAYL,EAAerB,EAChD,CAWAkB,WAAWS,GACT,OAAO5B,KAAKY,OAAOiB,KAAKD,EAC1B,CAKAT,WAAWW,GACT,IAAK,IAAIC,EAAOtC,UAAUC,OAAQsC,EAAO,IAAIC,MAAMF,EAAO,EAAIA,EAAO,EAAI,GAAIG,EAAO,EAAGA,EAAOH,EAAMG,IAClGF,EAAKE,EAAO,GAAKzC,UAAUyC,GAE7B,OAAOlC,KAAKE,gBAAgBiC,KAAKL,KAAiBE,EACpD,GAEF,IAAAjC,GAAgBZ,EAAe,gBAAiB,CAAC,QAAS,SAAU,Y","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/nft-collection-1e1e3cfd.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { az as StandardErc721, cx as ContractWrapper, ab as ContractMetadata, cH as TokenErc721ContractSchema, ac as ContractRoles, ad as ContractRoyalty, ae as ContractPrimarySale, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, aO as ContractPlatformFee, aN as ContractInterceptor, aq as Erc721, at as Erc721WithQuantitySignatureMintable, aQ as ContractOwner, bq as getRoleHash } from './thirdweb-checkout-ff2f368f.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @public\n */\nclass NFTCollection extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  async mint(metadata) {\n    return this.erc721.mint(metadata);\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  async mintTo(walletAddress, metadata) {\n    return this.erc721.mintTo(walletAddress, metadata);\n  }\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.erc721.getMintTransaction(receiver, metadata);\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  async mintBatch(metadata) {\n    return this.erc721.mintBatch(metadata);\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  async mintBatchTo(walletAddress, metadata) {\n    return this.erc721.mintBatchTo(walletAddress, metadata);\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(NFTCollection, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTCollection };\n"],"names":["NFTCollection","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","super","_","this","metadata","contractWrapper","roles","contractRoles","royalties","sales","encoder","estimator","events","platformFees","interceptor","erc721","signature","owner","onNetworkUpdated","updateSignerOrProvider","getAddress","readContract","async","hasRole","mint","walletAddress","mintTo","receiver","getMintTransaction","mintBatch","mintBatchTo","tokenId","burn","functionName","_len","args","Array","_key","call"],"sourceRoot":""}