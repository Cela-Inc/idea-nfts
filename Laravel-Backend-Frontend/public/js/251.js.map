{"version":3,"file":"js/251.js","mappings":"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","sources":["webpack:///./node_modules/@thirdweb-dev/sdk/dist/token-09aa25e7.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { ap as StandardErc20, cx as ContractWrapper, ab as ContractMetadata, cR as TokenErc20ContractSchema, ac as ContractRoles, ae as ContractPrimarySale, aM as ContractEvents, am as TokenERC20History, aa as ContractEncoder, aL as GasCostEstimator, aO as ContractPlatformFee, aN as ContractInterceptor, an as Erc20SignatureMintable, bq as getRoleHash } from './thirdweb-checkout-ff2f368f.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/storage';\nimport 'bs58';\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @public\n */\nclass Token extends StandardErc20 {\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"history\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  async mint(amount) {\n    return this.erc20.mint(amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  async mintTo(to, amount) {\n    return this.erc20.mintTo(to, amount);\n  }\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  async mintBatchTo(args) {\n    return this.erc20.mintBatchTo(args);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  async delegateTo(delegateeAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [delegateeAddress])\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  async burn(amount) {\n    return this.erc20.burn(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  async burnFrom(holder, amount) {\n    return this.erc20.burnFrom(holder, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Token, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { Token };\n"],"names":["Token","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","super","_","this","metadata","contractWrapper","roles","contractRoles","sales","events","history","encoder","estimator","platformFees","interceptor","signature","async","getVoteBalanceOf","getSignerAddress","account","erc20","getValue","readContract","getVotes","getDelegationOf","delegates","hasRole","amount","mint","to","mintTo","getMintTransaction","args","mintBatchTo","delegateeAddress","receipt","sendTransaction","burn","holder","burnFrom","functionName","_len","Array","_key","call"],"sourceRoot":""}